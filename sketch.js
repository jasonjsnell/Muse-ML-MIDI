// SETUP
// This function runs once when the P5 sketch starts

function setup() {

  // Set the canvas size. You can change these values if you'd like a bigger or smaller sketch window
  createCanvas(350, 350);

  // Set how fast the draw() function runs (frames per second).
  // NOTE: The Muse headband sends new data about 20 times per second.
  // A higher frame rate won’t get you more data, but might be useful for smoother animations.
  frameRate(20);

  // Do not change the 2 lines below.
  // These functions establish the connection to the Muse headband and activate the ML brain state detection.
  setupMuse();
  setupMuseML();
}

//layout vars
let MARGIN_LEFT = 20;
let TEXT_SIZE = 13;

// DRAW LOOP
// This runs at the frame rate set above (e.g. 30 times per second)
// This is where you handle incoming Muse data and draw visuals / trigger sound or lighting
function draw() {

  if (!isConnected) {
    //if not connected to Muse, show a message
    background('#222');
    return;
  }
  
  // if you want the background color based on brain state data and heartbeat mapped to RGB
  //for example, muscle or focus is red and meditation is blue
  background(visRed * 255, visGreen * 255, visBlue * 255);
  //if you just want the background to be black, uncomment this line:
  //background(0);



  // ---- ACCELEROMETER VISUALIZATION ----
  let centerY = height / 2;
  let centerX = width / 2;
  let xScale = 500; // Nodding
  let yScale = 500; // Ear-to-shoulder
  let zScale = 2000; // Shaking

  strokeWeight(0.5);

  // X-axis: Forward/backward nodding → vertical
  stroke(180);
  line(centerX, centerY, centerX, centerY + accel.x * xScale);

  // Y-axis: Ear to shoulder → diagonal left/right
  stroke(150);

  let xOffset = accel.y * yScale;      // keep the sign → left / right
  let yOffset = abs(xOffset);          // always positive → always down

  line(centerX, centerY, centerX + xOffset, centerY + yOffset);

  strokeWeight(1.0);
  // Z-axis: Head shaking left/right → horizontal
  stroke(120);
  let zOffset = (accel.z - 1.0) * zScale;
  line(centerX, centerY, centerX - zOffset, centerY); // ←→ shake




  // ---- EEG BRAINWAVES SPECTRUM CHART ----
  // Draw a white line chart representing EEG spectrum data
  beginShape();
  strokeWeight(1);
  noFill();
  stroke(255, 255, 255); //white line

  for (let i = 0; i <= eegSpectrum.length / 2; i++) {
    let x = map(i, 0, 48, 0, width);
    let y = map(eegSpectrum[i+1], 0, 50, height, 0);
    vertex(x, y);
  }
  endShape();

  // ---- PPG HEART FLOW CHART ----
  // When the PPG / heart blood flow data is ready, draw a red line showing heartbeat waveform
  if (ppg.buffer.length == PPG_SAMPLES_MAX) {
    
    //start to draw a line to show your heartbeat blood flow
    beginShape();
    strokeWeight(1); //thickness of line
    noFill(); 
    stroke(255, 100, 100); // red color

    //loop though the PPG heart data array
    //and draw it out as a red line
    //from the left side of the canvas to the right side

    for (let i = 1; i <= PPG_SAMPLES_MAX; i++) {
      let x = map(i, 0, PPG_SAMPLES_MAX, 0, width);
      let y = map(ppg.buffer[i], ppg.min, ppg.max, height * 0.6, height * 0.4);
      vertex(x, y); //<-- draw a line graph
    }
    endShape();
    //PPG heart data chart is now done drawing
  }

  // ---- BATTERY DISPLAY ----
  // Show current Muse headset battery level in the top right corner
  noStroke();
  fill(255);
  textSize(10);
  text("BATTERY: " + Math.floor(batteryLevel), width - 75, 30);

  
  // ---- STATE OF MIND DISPLAY ----
  // These values are generated by a machine learning model analyzing your EEG data
  // They give the user more control over interaction than raw EEG data

  // Set label transparency based on how strong each state is
  let noiseOpacity = Math.max(state.noise * 255, 50); 
  let muscleOpacity = Math.max(state.muscle * 255, 50); 
  let focusOpacity = Math.max(state.focus * 255, 50);
  let clearOpacity = Math.max(state.clear * 255, 50);
  let meditateOpacity = Math.max(state.meditation * 255, 50);
  let dreamOpacity = Math.max(state.dream * 255, 50);

  // Draw state labels with dynamic opacity
  textSize(TEXT_SIZE);
  fill(255, 255, 255, noiseOpacity);
  text("NOISE: " + state.noise, MARGIN_LEFT, 30);
  fill(255, 255, 255, muscleOpacity);
  text("MUSCLE: " + state.muscle, MARGIN_LEFT, 45);
  fill(255, 255, 255, focusOpacity);
  text("FOCUS: " + state.focus, MARGIN_LEFT, 60);
  fill(255, 255, 255, clearOpacity);
  text("CLEAR:  " + state.clear, MARGIN_LEFT, 75);
  fill(255, 255, 255, meditateOpacity);
  text("MEDITATE: " + state.meditation.toFixed(4), MARGIN_LEFT, 90);
  fill(255, 255, 255, dreamOpacity);
  text("DREAM: " + state.dream, MARGIN_LEFT, 105);

  fill(255, 255, 255, 255);

  // ---- HIGHLIGHT STRONGEST STATE ----
  // Draws an arrow to the left of the most active brain state
  let statePos = [-10, 30, 45, 60, 75, 90, 105];
  let highestState = STATE_NONE;
  let highestValue = 0;

  // Determine which state is currently dominant
  if (state.noise > highestValue) {
    highestValue = state.noise;
    highestState = STATE_NOISE;
  }
  if (state.muscle > highestValue) {
    highestValue = state.muscle;
    highestState = STATE_MUSCLE;
  }
  if (state.focus > highestValue) {
    highestValue = state.focus;
    highestState = STATE_FOCUS;
  }
  if (state.clear > highestValue) {
    highestValue = state.clear;
    highestState = STATE_CLEAR;
  }
  if (state.meditation > highestValue) {
    highestValue = state.meditation;
    highestState = STATE_MEDITATION;
  }
  if (state.dream > highestValue) {
    highestValue = state.dream;
    highestState = STATE_DREAM;
  }

  // Draw the arrow next to the dominant state
  text(">", 5, statePos[highestState] - 1);

  //print the brainwave ampltude values
  text("DELTA:  " + (eeg.delta/5).toFixed(1), MARGIN_LEFT, 135) + "%";
  text("THETA:  " + (eeg.theta/5).toFixed(1), MARGIN_LEFT, 150);
  text("ALPHA:  " + eeg.alpha.toFixed(1), MARGIN_LEFT, 165);
  text("BETA:  " + eeg.beta.toFixed(1), MARGIN_LEFT, 180);
  text("GAMMA:  " + eeg.gamma.toFixed(1), MARGIN_LEFT, 195);


  // ---- PPG / HEART RATE ----
  // Determine if the headset signal is good (not noise or none)
  const isGoodSignalForPPG = highestState !== STATE_NOISE && highestState !== STATE_NONE && ppg.bpm;

  // Activate or deactivate BPM output based on signal quality
  activateMidiBpm(isGoodSignalForPPG);    

  //if signal is good...
  if (isGoodSignalForPPG) {

    rawBPM = ppg.bpm; //store bpm
    smoothBPM(); //smooth out the bpm

    //if the heartbeat is actively occurring...
    if (ppg.heartbeat) {

      //draw a little dot to show the heartbeat
      text("HEART bpm: " + smoothedBPM.toFixed(0) + " •", MARGIN_LEFT, 225);
    } else {
      
      //else just show the bpm, no dot
      text("HEART bpm: " + smoothedBPM.toFixed(0), MARGIN_LEFT, 225);
    }
    
  }

  // ---- ACCELEROMETER ----
  // Shows current X, Y, Z motion values from Muse's accelerometer
  text("ACCEL X: " + accel.x.toFixed(2), MARGIN_LEFT, 255);
  text("ACCEL Y: " + accel.y.toFixed(2), MARGIN_LEFT, 270);
  text("ACCEL Z: " + accel.z.toFixed(2), MARGIN_LEFT, 285);


  // ---- LIGHTING OUTPUT (DMX) ----
  // This function sends brain and heart data to the DMX lighting system
  sendDmxLight();
}


//heartbeat
let rawBPM = 60;
let smoothedBPM = 60;
let bpmInc = 0.1;

function smoothBPM() {
  if (rawBPM != 0 && rawBPM != smoothedBPM) {
    if (rawBPM < smoothedBPM - bpmInc) {
      smoothedBPM -= bpmInc;
    } else if (rawBPM > smoothedBPM + bpmInc) {
      smoothedBPM += bpmInc;
    } else {
      smoothedBPM = rawBPM;
    }
    updateMidiBpm(smoothedBPM);
  }
}

function keyTyped() {
  if (key === '-') {
    decreaseMidiStateBoost();
  } else if (key === '=') {
    increaseMidiStateBoost();
  }
}
